=== DataWrapper ===

Copyright (c) 2011, Andrew Ettinger
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided 
that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the 
following disclaimer. 
Redistributions in binary form must reproduce the above copyright notice, this list of 
conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
The names of its contributors may not be used to endorse or promote products derived from this software without 
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DataWrapper is a simple Objective-C ORM. The only real configuration after adding it to your project is to tell DataWrapper.m what database to use:

  NSString *db= @"your_database.sqlite";

Note that each table's primary key needs to be 'key' not 'id' in order to avoid reserved word collisions.

Example usage:

CREATE TABLE Customers(
	key integer primary key autoincrement,
	name text,
	address text,
	city text,
	state text,
);

CustomerData.h:

  #import <Foundation/Foundation.h>
  #import "DataWrapper.h"

  @interface CustomerData : DataWrapper
  {
  	NSString *name;
	NSString *address;
	NSString *city;
	NSString *state;
  }

  @property (retain) NSString *name;
  @property (retain) NSString *address;
  @property (retain) NSString *city;
  @property (retain) NSString *state;
  @property (retain) NSString *zip;
  
  @end

CustomerData.m:

  #import "CustomerData.h"

  @implementation CustomerData

  @synthesize name, address, city, state;
  
  +(NSString) get_table
  {
    return @"Customers";
  }

  - (id) init
  {
	self.fields= [[NSMutableArray alloc] init];
	[self.fields addObject: @"name"];
	[self.fields addObject: @"address"];
	[self.fields addObject: @"city"];
	[self.fields addObject: @"state"];
	return [super init];
  }

  @end
  
Now in your controller you can do things like:

  CustomerData *cd= [[CustomerData alloc] init];
  cd.name= @"Andrew";
  cd.city= @"Portland";
  cd.state= @"OR";
  [cd save];

  NSMutableArray *results= [CustomerData find:@"state" withValue:"OR"];